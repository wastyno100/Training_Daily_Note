java 파일명과 public class 의 이름이 동일해야 한다. (가상머신에서 돌리기 위해?)
파일명은 class와 동일하기 때문에 숫자부터 시작하면 안되고 하이픈을 못 쓴다.
파일명, 클래스는 파스칼법으로 하는게 좋다. (명사/ BookClass)
메서드는 카멜법으로 표기하자. (동사/ run, getBackground같은)
변수는 간략하게 소통 가능하게 만들자. (i, k, f 같은거 X/ userName)

[자바]
		import java.util.* //외부에서 가져오는 형식
		public static void main(String[] args){} //구문이라고 생각
		System.out.println("Hello Java"); //출력
		public, private, protected // 메서드 접근 자
		static
		void // return 값이 없다.
		
		String a = new String("즐거운 자바"); // 이런 형태를 더 많이 사용, String 이라는 객체로 넣겠다는 뜻
		
		a.equals(b) //같으면 true, 틀리면 false를 출력, equals는 같다는 뜻
		d.indexOf("Java") // 맞는 값을 0부터 시작하는 자리값으로 찾아 줌
		d.contains("Ja"); // 포함 했으면 true, 미포함은 false
		
		String.format("나는 사과 %d%s 버렸지롱", n * m, "개를");//String을 변경
		String.format("%10s",data); // %10s - 10개의 공간을 가져라 (뒤에 data포함)
		String.format("%-10sjin",data)// 왼쪽에서부터 채워진다.
		String.format("%.4f",3.141592); //.n번째 자리를 표현하고 반올림
		
		StringBuffer sb = new StringBuffer();// 문자열 추가, 변경 시
        sb.append("hello"); // 길이 상관 없이 append 추가
		String result = sb.toString(); // 배열로 들어가있던 얘를 문자열로 바꿔준 것
		sb.substring(0,4); // 0 자리에서 4 자리까지만 출력
		System.out.println(Arrays.toString(week)); //배열을 String으로 바꿔 줌
		
		
	-설명-
		// public static void의 안쪽 작업 공간을 메서드 블럭이라고 부른다. 내가 작업 해야 할 명령어들을 적을 공간이다.
		// 퍼블릭과 프라이빗이 있는데 프라이빗은 지역변수 느낌이다. 퍼블릭은 전역변수?
		// string[]는 문자열 배열로 받겠다는 의미
		// args는 변수명이다.
		// class안에 메소드를 2개이상도 만들 수 있다.
		// 메서드 접근 자는 static void까지 연속으로 사용
		// 변수명도 숫자로 시작은 불가능
		// 변수명 int, class, return 등(예약어)은 사용 불가능
		// 객체로 담으면 fungtion을 포함한 더 많은 것들을 담을 수 있다.(new String 참고)
		// 객체로 담으면 대용량의 처리를 담을수있다.
		// string a = "Hello" - 이런 형태는 리터널이라 한다.
		// 다중처리 할때 int가 아닌 integer를 사용한다. (Wrapper Class 이미지 참고)
		// format은 ""님 환영합니다. 같은 것을 만들때 사용하기 좋다.
		// fotmat에서 %는 desimal %s는 String을 뜻함, 순서에 맞게 적어야한다.
	
	
	*(배열 공간의 정의)
		int[] odds= {1, 3, 5, 7, 9};
        String[] weeks = {"월", "화", "수", "목", "토", "금", "일"}; //단순 배열의 문자열로 자료를 받은 것

        String[] week = new String[7]; // 배열에 공간을 만든것을 String 형태로 받아 온것
        week[0] = "월"; // 만든 공간에 값을 넣는다.
        week[1] = "화";
        week[2] = "수";
        week[3] = "목";
        week[4] = "금";
        week[5] = "토";
        week[6] = "일";

        System.out.println(week);
        
        
	-설명-
		// 배열: 무언가를 저장하기 위한 공간
        // 구구단은 2~9단까지를 기억해야 할 단의 공간, 1~9를 곱할 수의 공간이 필요
        // int[] 단 = [8];
        // int[] 수 = [9];
	
	
	(자료형)
		int, long // 정수
		boolean // T,F
		char // 암호문을 만들 때 사용하기도 함, ''를 씀
		String // 문자열
		List, Map // 배열
		
	-설명-
		// 2,147,483,694‬가 int의 최대 숫자
		//int, long, double, float, boolean, char를 원시자료(prinitive) 라고 한다.
		//얘네들은 객체X, new 연산자 사용이 안된다.
		// new String은 특별대우
	
	(사용자 자료형)
		Class Animal{} Animal cat;
		
	-i++, ++i의 차이-
		int i = 0;
        System.out.println( i++ ); // 0
        System.out.println( i ); // 1
		
		int i = 0;
        System.out.println( ++i ); // 1
        System.out.println( i ); // 1
	


		
[자바의 사용 이유]
	우리나라에서는 java의 사용 빈도가 가장 높다. (자바 계열 포함)
	무수히 많은 라이브러리가 있다. (리액트, 뷰)
	안드로이드 계열 만들기 적합하다. (구글크롬 v8엔진(자바기반)로 자바스크립트가 날개를 담. 속도를 3~4배 증가시킴.)
	
[자바로 못하는 것]
	system os 어렵다.
	빠른 응답 속도 요구 프로그램 (c 계열로 만든다.)
	ios 만드는데 부적합하다.
	
	
[자바의 기능]
	GC (가베지 컬렉션) - 메모리 사용 후 회수되지 않은 자원을 자동 관리하다.
	JIT (Just in time) - 해당하는 라이브러리나 파일의 내용을 미리 준비시킨다.(무거울 수 밖에 없다)
	JDK - Java.exe, Javac.exe/ JVM + JRE
	Javac - 자바 컴파일 (번역기)
	JRE - Java.exe만 존재
	
[자바 컴파일]
	A.Java -> Javac(컴파일) -> A.class -> 010100~(기계어)
	
	-설명-
		JAVA형식에서 컴파일을 거치게 되면 class라는 자바의 확장자가 생긴다.
		class -> JVM(자바 가상 머신) 사용 가능